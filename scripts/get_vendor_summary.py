{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "051c4e88-828d-40ba-9966-685ac4ad3264",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sqlite3\n",
    "import pandas as pd\n",
    "import logging\n",
    "from ingestion_db import ingest_db"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "742fd012-1656-47a8-a967-f9aafe0683a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "logging.basicConfig(\n",
    "    filename =\"logs/get_vendor_summary.log\",\n",
    "    level = logging.DEBUG,\n",
    "    format=\"%(asctime)s - %(levelname)s - %(message)s\",\n",
    "    filemode =\"a\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "21409321-ae38-4841-9a34-80335329853a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_vendor_summary(conn):\n",
    "    '''\n",
    "    This function merges different tables to get the overall vendor summary\n",
    "    and adds new columns in the resultant data.\n",
    "    '''\n",
    "    \n",
    "    vendor_sales_summary = pd.read_sql_query(\"\"\"\n",
    "    WITH FreightSummary AS (\n",
    "        SELECT\n",
    "           VendorNumber,\n",
    "           SUM(Freight) AS FreightCost\n",
    "        FROM vendor_invoice\n",
    "        GROUP BY VendorNumber\n",
    "    ),\n",
    "    \n",
    "    PurchaseSummary AS (\n",
    "        SELECT\n",
    "           p.VendorNumber,\n",
    "           p.VendorName,\n",
    "           p.Brand,\n",
    "           p.Description,\n",
    "           p.PurchasePrice,\n",
    "           pp.Price AS ActualPrice,\n",
    "           pp.Volume,\n",
    "           SUM(p.Quantity) AS TotalPurchaseQuantity,\n",
    "           SUM(p.Dollars) AS TotalPurchaseDollars\n",
    "        FROM purchases p\n",
    "        JOIN purchase_prices pp\n",
    "           ON p.Brand = pp.Brand\n",
    "        WHERE p.PurchasePrice > 0\n",
    "        GROUP BY p.VendorNumber, p.VendorName, p.Brand, p.Description, p.PurchasePrice, pp.Price, pp.Volume\n",
    "    ),\n",
    "    \n",
    "    SalesSummary AS (\n",
    "        SELECT\n",
    "            VendorNo,\n",
    "            Brand,\n",
    "            SUM(SalesQuantity) AS TotalSalesQuantity,\n",
    "            SUM(SalesDollars) AS TotalSalesDollars,\n",
    "            SUM(SalesPrice) AS TotalSalesPrice,\n",
    "            SUM(ExciseTax) AS TotalExciseTax\n",
    "        FROM sales\n",
    "        GROUP BY VendorNo, Brand\n",
    "    )\n",
    "    \n",
    "    SELECT\n",
    "       ps.VendorNumber,\n",
    "       ps.VendorName,\n",
    "       ps.Brand,\n",
    "       ps.Description,\n",
    "       ps.PurchasePrice,\n",
    "       ps.ActualPrice,\n",
    "       ps.Volume,\n",
    "       ps.TotalPurchaseQuantity,\n",
    "       ps.TotalPurchaseDollars,\n",
    "       ss.TotalSalesQuantity,\n",
    "       ss.TotalSalesDollars,\n",
    "       ss.TotalSalesPrice,\n",
    "       ss.TotalExciseTax,\n",
    "       fs.FreightCost\n",
    "    FROM PurchaseSummary ps\n",
    "    LEFT JOIN SalesSummary ss\n",
    "       ON ps.VendorNumber = ss.VendorNo\n",
    "       AND ps.Brand = ss.Brand\n",
    "    LEFT JOIN FreightSummary fs\n",
    "       ON ps.VendorNumber = fs.VendorNumber\n",
    "    ORDER BY ps.TotalPurchaseDollars DESC\n",
    "    \"\"\", conn)\n",
    "    \n",
    "    return vendor_sales_summary\n",
    "\n",
    "\n",
    "def clean_data(df):\n",
    "    '''this function will clean the data'''\n",
    "    #changing datatype to float\n",
    "    df['Volume'] = df['Volume'].astype('float')\n",
    "\n",
    "    #filling missing value with 0\n",
    "    df.fillna(0, inplace = True)\n",
    "\n",
    "    #removing spaces from categorical columns\n",
    "    df['VendorName'] = df['VendorName'].str.strip()\n",
    "    df['Description'] = df['Description'].str.strip()\n",
    "\n",
    "    #creating new columns for better analysis\n",
    "    df['GrossProfit'] = df['TotalSalesDollars'] - df['TotalPurchaseDollars']\n",
    "    df['ProfitMargin'] = df['GrossProfit']/df['TotalSalesDollars']\n",
    "    df['StockTurnover'] = df['TotalSalesQuantity']/df['TotalPurchaseQuantity']\n",
    "    df['SalestoPurchaseRatio'] = df['TotalSalesDollars']/df['TotalPurchaseDollars']\n",
    "\n",
    "    return df\n",
    "\n",
    "if __name__== '__main__':\n",
    "    #creating database connection\n",
    "    conn = sqlite3.connect('inventory.db')\n",
    "\n",
    "    logging.info('Creating Vendor Summary Table....')\n",
    "    summary_df = create_vendor_summary(conn)\n",
    "    logging.info(summary_df.head())\n",
    "\n",
    "    logging.info('Cleaning Data.....')\n",
    "    clean_df = clean_data(summary_df)\n",
    "    logging.info(clean_df.head())\n",
    "\n",
    "    logging.info('Ingesting data......')\n",
    "    ingest_db(clean_df,'vendor_sales_summary', conn)\n",
    "    logging.info('Completed')\n",
    "\n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d150428-4c60-4c88-82c2-258f544dd095",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
